# 应用服务 web 访问端口
server:
  port: 8089

spring:
  kafka:
    bootstrap-servers: 192.168.0.103:9092, 192.168.0.103:9093, 192.168.0.103:9094 # 集群地址
    # 取决于该项目是生产者还是消费者，该项目用于测试所以两者都配置
    producer: # 生产者
      retries: 3 # 设置大于0的值，则客户端会将发送失败的记录重新发送
      batch-size: 16384 # 拉满16k
      buffer-memory: 33554432 # 32m内存
      acks: 1 # 默认同步发送, 1个leader拿到后再进行下一步业务
      # 指定消息key和消息体的编码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer: # 消费者
      group-id: default-group # 消费组id
      enable-auto-commit: false # 自动提交关闭
      auto-offset-reset: earliest # 第一次从头开始，往后从最新offset读取
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 500 # 一次最多拉500条消息
    listener:
      # 当每一条记录被消费者监听器(ListenerConsumer)处理之后提交
      # RECORD
      # 当每一批poll()的数据被消费者监听器(ListenerConsumer)处理之后提交# BATCH
      #当每一批poll()的数据被消费者监听器(ListenerConsumer)处理之后，距离上次提交时间大于TIME时提交
      # TIME
      # 当每一批poll()的数据被消费者监听器(ListenerConsumer)处理之后，被处理record数量大于等于CoUNT时提交
      # COUNT
      # TIME / COUNT 有一个条件满足时提交
      # COUNT_TIME
      #当每一批polL()的数据被消费者监听器(ListenerConsumer)处理之后，手动调用Acknowledgment.acknowledge()后提交
      # MANUAL
      # 手动调用Acknowledgment.acknowledge（）后立即提交，一般使用这种
      # MANUAL_IMMEDIATE
      ack-mode: MANUAL_IMMEDIATE
  redis:
    host: 192.168.0.103 # redis主机